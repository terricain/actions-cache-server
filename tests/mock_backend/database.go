// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/terrycain/actions-cache-server/pkg/database (interfaces: Backend)

// Package mock_backend is a generated GoMock package.
package mock_backend

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	s "github.com/terrycain/actions-cache-server/pkg/s"
)

// MockDatabaseBackend is a mock of Backend interface.
type MockDatabaseBackend struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseBackendMockRecorder
}

// MockDatabaseBackendMockRecorder is the mock recorder for MockDatabaseBackend.
type MockDatabaseBackendMockRecorder struct {
	mock *MockDatabaseBackend
}

// NewMockDatabaseBackend creates a new mock instance.
func NewMockDatabaseBackend(ctrl *gomock.Controller) *MockDatabaseBackend {
	mock := &MockDatabaseBackend{ctrl: ctrl}
	mock.recorder = &MockDatabaseBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseBackend) EXPECT() *MockDatabaseBackendMockRecorder {
	return m.recorder
}

// AddUploadPart mocks base method.
func (m *MockDatabaseBackend) AddUploadPart(arg0 string, arg1 int, arg2 s.CachePart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUploadPart", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUploadPart indicates an expected call of AddUploadPart.
func (mr *MockDatabaseBackendMockRecorder) AddUploadPart(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUploadPart", reflect.TypeOf((*MockDatabaseBackend)(nil).AddUploadPart), arg0, arg1, arg2)
}

// CreateCache mocks base method.
func (m *MockDatabaseBackend) CreateCache(arg0, arg1, arg2 string, arg3 []s.Scope, arg4 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCache", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCache indicates an expected call of CreateCache.
func (mr *MockDatabaseBackendMockRecorder) CreateCache(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCache", reflect.TypeOf((*MockDatabaseBackend)(nil).CreateCache), arg0, arg1, arg2, arg3, arg4)
}

// FinishCache mocks base method.
func (m *MockDatabaseBackend) FinishCache(arg0 string, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishCache", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishCache indicates an expected call of FinishCache.
func (mr *MockDatabaseBackendMockRecorder) FinishCache(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishCache", reflect.TypeOf((*MockDatabaseBackend)(nil).FinishCache), arg0, arg1, arg2)
}

// SearchCache mocks base method.
func (m *MockDatabaseBackend) SearchCache(arg0, arg1, arg2 string, arg3 []s.Scope, arg4 []string) (s.Cache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCache", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(s.Cache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCache indicates an expected call of SearchCache.
func (mr *MockDatabaseBackendMockRecorder) SearchCache(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCache", reflect.TypeOf((*MockDatabaseBackend)(nil).SearchCache), arg0, arg1, arg2, arg3, arg4)
}

// Type mocks base method.
func (m *MockDatabaseBackend) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockDatabaseBackendMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockDatabaseBackend)(nil).Type))
}

// ValidateUpload mocks base method.
func (m *MockDatabaseBackend) ValidateUpload(arg0 string, arg1 int, arg2 int64) ([]s.CachePart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUpload", arg0, arg1, arg2)
	ret0, _ := ret[0].([]s.CachePart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateUpload indicates an expected call of ValidateUpload.
func (mr *MockDatabaseBackendMockRecorder) ValidateUpload(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUpload", reflect.TypeOf((*MockDatabaseBackend)(nil).ValidateUpload), arg0, arg1, arg2)
}
