// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/terrycain/actions-cache-server/pkg/storage (interfaces: Backend)

// Package mock_backend is a generated GoMock package.
package mock_backend

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	s "github.com/terrycain/actions-cache-server/pkg/s"
)

// MockStorageBackend is a mock of Backend interface.
type MockStorageBackend struct {
	ctrl     *gomock.Controller
	recorder *MockStorageBackendMockRecorder
}

// MockStorageBackendMockRecorder is the mock recorder for MockStorageBackend.
type MockStorageBackendMockRecorder struct {
	mock *MockStorageBackend
}

// NewMockStorageBackend creates a new mock instance.
func NewMockStorageBackend(ctrl *gomock.Controller) *MockStorageBackend {
	mock := &MockStorageBackend{ctrl: ctrl}
	mock.recorder = &MockStorageBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageBackend) EXPECT() *MockStorageBackendMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStorageBackend) Delete(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageBackendMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageBackend)(nil).Delete), arg0, arg1)
}

// Finalise mocks base method.
func (m *MockStorageBackend) Finalise(arg0 string, arg1 int, arg2 []s.CachePart) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finalise", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Finalise indicates an expected call of Finalise.
func (mr *MockStorageBackendMockRecorder) Finalise(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalise", reflect.TypeOf((*MockStorageBackend)(nil).Finalise), arg0, arg1, arg2)
}

// GenerateArchiveURL mocks base method.
func (m *MockStorageBackend) GenerateArchiveURL(arg0, arg1, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateArchiveURL", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateArchiveURL indicates an expected call of GenerateArchiveURL.
func (mr *MockStorageBackendMockRecorder) GenerateArchiveURL(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateArchiveURL", reflect.TypeOf((*MockStorageBackend)(nil).GenerateArchiveURL), arg0, arg1, arg2, arg3)
}

// GetFilePath mocks base method.
func (m *MockStorageBackend) GetFilePath(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilePath", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilePath indicates an expected call of GetFilePath.
func (mr *MockStorageBackendMockRecorder) GetFilePath(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilePath", reflect.TypeOf((*MockStorageBackend)(nil).GetFilePath), arg0)
}

// Setup mocks base method.
func (m *MockStorageBackend) Setup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockStorageBackendMockRecorder) Setup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockStorageBackend)(nil).Setup))
}

// Type mocks base method.
func (m *MockStorageBackend) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockStorageBackendMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockStorageBackend)(nil).Type))
}

// Write mocks base method.
func (m *MockStorageBackend) Write(arg0 string, arg1 int, arg2 io.Reader, arg3, arg4 int, arg5 int64) (string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Write indicates an expected call of Write.
func (mr *MockStorageBackendMockRecorder) Write(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStorageBackend)(nil).Write), arg0, arg1, arg2, arg3, arg4, arg5)
}
